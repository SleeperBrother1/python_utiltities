#!/biometrics/global/gpythonvenv/bin/python3
######### start of header ######################################
# Program Name:  lxml_define
# Author:        Lawrence Sleeper (lsleeper)
# Description:   Python Script to create validation spreadsheet
# Category:      Utility
# Macros called: 
# Parameter:                
# Usage:         lxml_define
#                                                                       
# Change History: 
#      2019-12-11  lsleeper - Original programming    
# 
# to do
#  1. fix stylesheet hack
#  2. ARM - ParameterOID, Pagerefs, check for blank values
########## end of header ###########################################/

import pandas as pd
import os
import shutil
import pandas
from lxml import etree
import pandas as pd
import datetime

def write_define_xml(root):

		# doing this makes pretty_print work
		for element in root.iter():
		    element.tail = None
			
		# create the xml string
		obj_xml = etree.tostring(root,
		                         pretty_print=True,
		                         xml_declaration=True, 
		                         encoding='UTF-8')
		
		
		with open("temp_define.xml", "wb") as xml_writer:
				xml_writer.write(obj_xml)
        
    # Hack - replace 2nd line of file with stylesheet.  lxml strips it
   
		# read in temp define xml
		from_file = open("temp_define.xml") 
		line = from_file.readline()
		
		# update python program to point at virtual enviroment interpreter
		to_file = open("define.xml", mode="w")
		to_file.write(line + "\n" + '<?xml-stylesheet type="text/xsl" href="define2-0-0.xsl"?>\n')
		
		# save updated utility
		shutil.copyfileobj(from_file, to_file)
			
		# close file handles
		from_file.close()
		to_file.close()
		os.remove("temp_define.xml")

#### Build Description Section
def build_xml_Description(node, description):
		if not pd.isna(description):
				desc=etree.SubElement(node,"Description")
				trantxt=etree.SubElement(desc,"TranslatedText")
				trantxt.text=description
				trantxt.set("{%s}lang" % (ns_xml), "en")	

#### Build Origin Section
def build_xml_Origin(node, origin, pages, predecessor):

		orgtype=etree.SubElement(node,"{%s}Origin" % (ns_def))
		orgtype.set("Type",origin)																											
		
		if origin=='CRF' and not pd.isna(pages):
				docref=etree.SubElement(orgtype,"{%s}DocumentRef" % (ns_def))
				docref.set("leafID","LF.acrf")
				pdfref=etree.SubElement(docref, "{%s}PDFPageRef" %(ns_def))
				pdfref.set("Type","PhysicalRef")
				pdfref.set("PageRefs",str(int(pages)))
		elif origin=='Predecessor':
				build_xml_Description(orgtype, predecessor)		

#### Build GlobalVariables Section
def build_xml_GlobalVariables(node):

		# Add Global Variables section
		global_vars=etree.SubElement(node,'GlobalVariables')
		study_name=etree.SubElement(global_vars,"StudyName")
		study_name.text=vstudy_name
		study_desc=etree.SubElement(global_vars,"StudyDescription")
		study_desc.text=vstudy_desc
		prot_name=etree.SubElement(global_vars,"ProtocolName")
		prot_name.text=vprotocol_name

#### Add Metadata Version and Supplmeental Doc sections
def build_xml_MetadataVersion(node):
	
		mdv=etree.SubElement(node,"MetaDataVersion")
		mdv.set("OID",mdv_oid)
		mdv.set("{%s}DefineVersion" % (ns_def),"2.0.0") 
		mdv.set("Name", "Study "+vstudy_name+" Data Definitions")
		mdv.set("{%s}StandardName" % (ns_def), vstandard_name)
		mdv.set("{%s}StandardVersion" % (ns_def), vstandard_version)
		mdv.set("Description", vstudy_desc)

		
		# Add Annotated CRF if it exists
		df_doc = pd.read_excel(xlsxname, sheet_name='Documents')
		for index, row in df_doc.head().iterrows():
				if row['ID'] == 'acrf':
						acrf=etree.SubElement(mdv,"{%s}AnnotatedCRF" % (ns_def))
						docref=etree.SubElement(acrf,"{%s}DocumentRef" % (ns_def))					
						docref.set("leafID","LF."+row['ID'])

		# Add SupplementalDoc section
		suppdoc=etree.SubElement(mdv,"{%s}SupplementalDoc" % (ns_def))

		df_doc = pd.read_excel(xlsxname, sheet_name='Documents')
		for index, row in df_doc.head().iterrows():
				if row['ID'] != 'acrf':
						docref=etree.SubElement(suppdoc,"{%s}DocumentRef" % (ns_def))
						docref.set("leafID","LF."+row['ID'])
										
		return mdv

#### Build ValueListDef Section
def build_xml_valueListDef(node):
	
		df_vl = pd.read_excel(xlsxname, sheet_name='ValueLevel')
		
		dataset='12345678'
		variable='12345678'
		    
		for index, row in df_vl.iterrows():
			
				# Add ValueListDef			
				if row['Dataset'] != dataset or row['Variable'] != variable:	
						dataset=row['Dataset']
						variable=row['Variable']
						vldef=etree.SubElement(node,"{%s}ValueListDef" % (ns_def))
						vldef.set("OID","VL."+dataset+"."+variable)
				
				# Add ItemRefs
				itemref=etree.SubElement(vldef,"ItemRef")
				itemref.set("ItemOID","IT."+dataset+'.'+variable+'.'+row['Where Clause'])
				itemref.set("OrderNumber",str(row['Order']))
				itemref.set("Mandatory",row['Mandatory'])
				
				if not pd.isna(row['Method']):		
						itemref.set("MethodOID",row['Method'])
				
				# Add WhereClauseRef to Item Ref
				wcdef=etree.SubElement(itemref,"{%s}WhereClauseRef" % (ns_def))
				wcdef.set("WhereClauseOID", row['Where Clause'])	
				
		
#### Build Where Clause Section
def build_xml_whereClauseDef(node):
	
		df_wc = pd.read_excel(xlsxname, sheet_name='WhereClauses')
		
		for index, row in df_wc.iterrows():
		
				wcdef=etree.SubElement(node,"{%s}WhereClauseDef" % (ns_def))
				wcdef.set("OID", row['ID'])
				rngchk=etree.SubElement(wcdef,"RangeCheck")
				rngchk.set("SoftHard","Soft") # when is it hard?
				rngchk.set("{%s}ItemOID" % (ns_def), "IT."+row['Dataset']+"."+row['Variable'])
				rngchk.set("Comparator",row['Comparator'])
				chkval=etree.SubElement(rngchk, "CheckValue")
				chkval.text=row['Value']
				
#### Build Item Group Def Section				
def build_xml_itemGroupDef(node):

		df_ds = pd.read_excel(xlsxname, sheet_name='Datasets')
		df_allvars = pd.read_excel(xlsxname, sheet_name='Variables')
				
		for index, row in df_ds.iterrows():
			
				dataset=str(row['Dataset'])
				keylist=str(row['Key Variables']).split(',')
		
				igdef=etree.SubElement(node,"ItemGroupDef")
				igdef.set("OID","IG."+dataset)
				igdef.set("Name",dataset)
				igdef.set("Repeating",blank_if_nan(row['Repeating']))
				igdef.set("IsReferenceData",blank_if_nan(row['Reference Data']))
				igdef.set("SasDatasetName",dataset)
				igdef.set("Purpose",blank_if_nan(row['Purpose']))						
				igdef.set("{%s}Structure" % (ns_def), blank_if_nan(row['Structure']))
				igdef.set("{%s}Class" % (ns_def), blank_if_nan(row['Class']))
				if not pd.isna(row['Comment']):				
						igdef.set("{%s}CommentOID" % (ns_def), row['Comment'])
				igdef.set("{%s}ArchiveLocationID" % (ns_def), "LF."+dataset)		
				build_xml_Description(igdef, row['Description']);

				# Subset dataframe to have only the variables for the current dataset				
				df_vars = df_allvars.loc[lambda x: x['Dataset'] == dataset]
				
				for index, row in df_vars.iterrows():
						variable=row['Variable']
						itref=etree.SubElement(igdef,"ItemRef")
						itref.set("ItemOID","IT."+dataset+"."+variable)
						itref.set("OrderNumber",str(row['Order']))
						itref.set("Mandatory",str(row['Mandatory']))
						if variable in keylist:
								key_seq = keylist.index(variable) + 1
								itref.set("KeySequence",str(key_seq))
							
						if not pd.isna(row['Method']):
								itref.set("MethodOID",row['Method'])						
						if not pd.isna(row['Role']):
								itref.set("Role",row['Role'])					
																		
				# Build link to xpt dataset
				dslink=etree.SubElement(igdef,"{%s}leaf" % (ns_def))
				dslink.set("ID","LF."+dataset)
				dslink.set("{%s}href" % (ns_xlink), dataset+".xpt")
				title=etree.SubElement(dslink, "{%s}title" % (ns_def))
				title.text=dataset+".xpt"
				
				
#### Build Item Def Section				
def build_xml_itemDef(node):

		# Load variables tab into a pandas dataframe		
		df_allvars = pd.read_excel(xlsxname, sheet_name='Variables')
		
		# Load value level tab into a pandas dataframe
		df_vl = pd.read_excel(xlsxname, sheet_name='ValueLevel')
			
		# Build ItemDefs from Variables Page
		for index, row in df_allvars.iterrows():
				dataset=row['Dataset']			
				variable=row['Variable']
				itdef=etree.SubElement(node,"ItemDef")
				itdef.set("OID","IT."+dataset+"."+variable)
				itdef.set("Name",variable)
				itdef.set("DataType",row['Data Type'])
				if not pd.isna(row['Length']):
						itdef.set("Length",str(int(row['Length'])))
				itdef.set("SASFieldName",variable)
				if not pd.isna(row['Significant Digits']):
						itdef.set("SignificantDigits", str(row['Significant Digits']))						
				
				build_xml_Description(itdef, row['Label'])
				
				if not pd.isna(row['Codelist']):
						cdlist=etree.SubElement(itdef,"CodeListRef")
						cdlist.set("CodeListOID","CL."+row['Codelist'])			
						
				if not pd.isna(row['Format']):
						itdef.set("{%s}DisplayFormat" % (ns_def),str(row['Format']))		
						
				if not pd.isna(row['Comment']):
						itdef.set("{%s}CommentOID" % (ns_def),row['Comment'])		

				# create origin (need to join up with value level page to determine if there is value levelmetadata)
				df_vl_this_var = df_vl[(df_vl['Dataset'] == dataset) & (df_vl['Variable'] == variable)]
				if len(df_vl_this_var)>0:
						vlref=etree.SubElement(itdef,"{%s}ValueListRef" % (ns_def))
						vlref.set("ValueListOID","VL."+row['Dataset']+"."+row['Variable'])
																
				if not pd.isna(row['Origin']):
						build_xml_Origin(itdef, row['Origin'], row['Pages'], row['Predecessor'])
						
		# Build ItemDefs from Value Level Page
		for index, row in df_vl.iterrows():		
				itdef=etree.SubElement(node,"ItemDef")
				itdef.set("OID", "IT."+row['Dataset']+'.'+row['Variable']+'.'+row['Where Clause'])
				itdef.set("Name", row['Variable']+'.'+row['Where Clause'])
				itdef.set("DataType", row['Data Type'])
				itdef.set("Length", str(int(row['Length'])))
				itdef.set("SASFieldName", str(row['Variable']))

				if not pd.isna(row['Significant Digits']):
						itdef.set("SignificantDigits", str(row['Significant Digits']))				
				
				if not pd.isna(row['Codelist']):
						cdlist=etree.SubElement(itdef,"CodeListRef")
						cdlist.set("CodeListOID","CL."+row['Codelist'])			
				
				if not pd.isna(row['Format']):
						itdef.set("{%s}DisplayFormat" % (ns_def), str(row['Format']))
				
				# create origin
				if not pd.isna(row['Origin']):
						build_xml_Origin(itdef, row['Origin'], row['Pages'], row['Predecessor'])
				
#### Build Code List Section								
def build_xml_CodeList(node):
	
		df_cl = pd.read_excel(xlsxname, sheet_name='Codelists')
		
		codelist='12345678'
		for index, row in df_cl.iterrows():		
			
				if row['ID'] != codelist:
						codelist=row['ID']						
						cdlst=etree.SubElement(node,"CodeList")					
						cdlst.set("OID", "CL."+codelist)
						cdlst.set("Name", row['Name'])
						cdlst.set("DataType", row['Data Type'])
						
						ncicode=row['NCI Codelist Code']
						if not pd.isna(ncicode):
								alias=etree.SubElement(cdlst,"Alias")
								alias.set("Name",row['NCI Codelist Code'])
								alias.set("Context", "nci:ExtCodeID")
				
				if pd.isna(row['Decoded Value']):								
						cdlstitm=etree.SubElement(cdlst,"EnumeratedItem")
				else:
						cdlstitm=etree.SubElement(cdlst,"CodeListItem")
				cdlstitm.set("CodedValue",str(row['Term']))
				cdlstitm.set("OrderNumber",str(row['Order']))
				nciterm=row['NCI Term Code']
				if not pd.isna(nciterm):
						alias=etree.SubElement(cdlstitm,"Alias")
						alias.set("Name",row['NCI Term Code'])
						alias.set("Context", "nci:ExtCodeID")
						
				if not pd.isna(ncicode) and pd.isna(nciterm):
						cdlstitm.set("{%s}ExtendedValue" % (ns_def), "Yes")

				if not pd.isna(row['Decoded Value']):				
						decod=etree.SubElement(cdlstitm,"Decode")
						trantxt=etree.SubElement(decod,"TranslatedText")
						trantxt.text=row['Decoded Value']
						trantxt.set("{%s}lang" % (ns_xml), "en")	

				
def build_xml_MethodDef(node):

		df_md = pd.read_excel(xlsxname, sheet_name='Methods')
		
		for index, row in df_md.iterrows():		
				mthdef=etree.SubElement(node,"MethodDef")
				mthdef.set("OID",row['ID'])
				mthdef.set("Name",row['Name'])
				mthdef.set("Type",row['Type'])
				
				if not pd.isna(row['Description']):				
						build_xml_Description(mthdef, row['Description'])					
			  
def build_xml_CommentDef(node):
	
		df_cm = pd.read_excel(xlsxname, sheet_name='Comments')
		
		for index, row in df_cm.iterrows():		
				cmtdef=etree.SubElement(node,"{%s}CommentDef" % (ns_def))
				cmtdef.set("OID",row['ID'])
				
				if not pd.isna(row['Description']):	
						build_xml_Description(cmtdef, row['Description'])					

def build_xml_external_docs(node):
	
		df_xdoc = pd.read_excel(xlsxname, sheet_name='Documents')
		
		for index, row in df_xdoc.iterrows():		
				leaf=etree.SubElement(node,"{%s}leaf" % (ns_def))
				leaf.set("ID","LF."+row['ID'])			
				leaf.set("{%s}href" % (ns_xlink), row['Href'])
				title=etree.SubElement(leaf, "{%s}title" % (ns_def))
				title.text=row['Title']
								
def build_xml_arm(node):
	
		df_adisplays = pd.read_excel(xlsxname, sheet_name='Analysis Displays')		
		if len(df_adisplays.index)==0:
				exit()

		df_aresults = pd.read_excel(xlsxname, sheet_name='Analysis Results', index=['Display'])						
		
		df_acriteria = pd.read_excel(xlsxname, sheet_name='Analysis Criteria', index=['Display'])						
				
		ards=etree.SubElement(node,"{%s}AnalysisResultDisplays" % (ns_arm))		
		
		for index, row in df_adisplays.iterrows():		

				rd=etree.SubElement(ards,"{%s}ResultDisplay" % (ns_arm))	
				display=row['ID']	
				rd.set("OID","RD."+display)
				rd.set("Name",display)
				build_xml_Description(rd, row['Title'])
				
				docref=etree.SubElement(rd,"{%s}DocumentRef" % (ns_def))
				docref.set("leafID","LF."+row['Document'])
				pdfref=etree.SubElement(docref, "{%s}PDFPageRef" %(ns_def))
				pdfref.set("Type","PhysicalRef")
				pdfref.set("PageRefs",str(row['Pages']))
				
				# Join up with Analysis results for this display
				df_ar_this_display = df_aresults[(df_aresults['Display'] == display)]
				
				for index, ar_row in df_ar_this_display.iterrows():
						ar=etree.SubElement(rd,"{%s}AnalysisResult" % (ns_arm))
						ar.set("OID","AR."+ar_row['ID'])
						#ar.set("ParameterOID','') # ??? where to get this info?
						ar.set("AnalysisReason",ar_row['Reason'])
						ar.set("AnalysisPurpose",ar_row['Purpose'])
						build_xml_Description(ar, ar_row['Description'])
						
						# Join up with Analysis results for this display
						df_ac_this_display = df_acriteria[(df_acriteria['Display'] == display)]
						if len(df_ac_this_display.index)!=0:
								ads=etree.SubElement(ar,"{%s}AnalysisDatasets" % (ns_arm))
								ads.set("{%s}CommentOID" %(ns_def),"COM."+ar_row['Join Comment'])				
								for index, ac_row in df_ac_this_display.iterrows():
										ad=etree.SubElement(ads,"{%s}AnalysisDataset" % (ns_arm))
										ad.set("ItemGroupOID","IG."+ac_row['Dataset'])
										wcref=etree.SubElement(ad,"{%s}WhereClauseRef" % (ns_def))
										wcref.set("WhereClauseOID", "WC."+ac_row['Where Clause'])
										if not pd.isna(ac_row['Variables']):
												av=etree.SubElement(ad,"{%s}AnalysisVariable" % (ns_arm))
												av.set("ItemOID","IT."+ac_row['Dataset']+'.'+ac_row['Variables'])
								
						doc=etree.SubElement(ar, "{%s}Documentation" % (ns_arm))
						if not pd.isna(ar_row['Documentation']):	
								build_xml_Description(doc, ar_row['Documentation'])
						if not pd.isna(ar_row['Documentation Refs']):				
								docref=etree.SubElement(doc,"{%s}DocumentRef" % (ns_def))
								docref.set("leafID","LF."+ar_row['Documentation Refs'])
								pdfref=etree.SubElement(docref, "{%s}PDFPageRef" %(ns_def))
								pdfref.set("Type","PhysicalRef")
								#pdfref.set("PageRefs",str(row['Pages']))
						if not pd.isna(ar_row['Programming Code']):				
								pc=etree.SubElement(ar,"{%s}ProgrammingCode" % (ns_arm))
								pc.set('Context',ar_row['Programming Context'])
								pgcode=etree.SubElement(pc,"{%s}Code" % (ns_arm))
								pgcode.text=ar_row['Programming Code']
								docref=etree.SubElement(pc,"{%s}DocumentRef" % (ns_def))
								docref.set("leafID","LF."+ar_row['Programming Document'])
 
def blank_if_nan(value):
		if pd.isna(value):
				return ''
		else:
				return value

#### Main body of program

def build_define(specdoc, arm):
	
		if not (os.path.isfile(specdoc)):
				print ('Excel file', specdoc, 'does not exist')
				exit(1)
				
		global xlsxname
		xlsxname=specdoc
			
		# read spec in pandas dataframe			
		df_study = pd.read_excel(xlsxname, sheet_name='Study', index_col="Attribute")
		
		# set useful variables from study page of spec
		global vstudy_name, vstudy_desc, vprotocol_name, mdv_oid, vstandard_name, vstandard_version
		vstudy_name=blank_if_nan(df_study.loc["StudyName"].iloc[0])
		vstandard_name=blank_if_nan(df_study.loc["StandardName"].iloc[0])
		vstudy_desc=blank_if_nan(df_study.loc["StudyDescription"].iloc[0])
		vprotocol_name=blank_if_nan(df_study.loc["ProtocolName"].iloc[0])
		vstandard_version=blank_if_nan(df_study.loc["StandardVersion"].iloc[0])
		vstudy_oid=vstudy_name+"."+vstandard_name+'.'+vstandard_version
		mdv_oid="MDV."+vstudy_oid+'.'+vstandard_version
		
		# set up namespaces necessary for define 2.0
		global ns_def, ns_xlink, ns_odm, ns_arm, ns_xml
		ns_def="http://www.cdisc.org/ns/def/v2.0"
		ns_xlink="http://www.w3.org/1999/xlink"
		ns_odm="http://www.cdisc.org/ns/odm/v1.3"
		ns_arm="http://www.cdisc.org/ns/arm/v1.0"
		ns_xml="http://www.w3.org/XML/1998/namespace"
		
		# create dictionary of namespace mappings
		global NSMAP
		NSMAP = {"def"   : ns_def,
		         "xlink" : ns_xlink,
		         None    : ns_odm,
		         "arm"   : ns_arm,
		         "xml"	 : ns_xml}
		
		# create ODM element
		odm=etree.Element('ODM', nsmap = NSMAP)
		
		# add ODM attributes
		odm.set("ODMVersion","1.3.2")
		odm.set("FileType","Snapshot")
		odm.set("CreationDateTime",datetime.datetime.now().replace(microsecond=0).isoformat())
		odm.set("SourceSystem","lxml_define")
		odm.set("SourceSystemVersion","1.0")
		
		# Add Study Tag
		study=etree.SubElement(odm,'Study')
		study.set("OID",vstudy_oid)
		
		      	
		#### Calls to major functions to build xml
		build_xml_GlobalVariables(study)
		mdv=build_xml_MetadataVersion(study)
		build_xml_valueListDef(mdv)
		build_xml_whereClauseDef(mdv)
		build_xml_itemGroupDef(mdv)
		build_xml_itemDef(mdv)
		build_xml_CodeList(mdv)
		build_xml_MethodDef(mdv)
		build_xml_CommentDef(mdv)
		build_xml_external_docs(mdv)
		if arm:
				build_xml_arm(mdv)	
		write_define_xml(odm)
	
build_define("p21_version2_define_DRAFT_community.xlsx", False)